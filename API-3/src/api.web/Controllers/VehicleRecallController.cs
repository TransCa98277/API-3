using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using api.web.Entities;
using api.web.Implementations;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace api.web.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Produces("application/json")]
    public class VehicleRecallController : ControllerBase
    {
        private readonly ILogger<VehicleRecallController> _logger;
        private readonly IManageAPI _manageAPI;
        private readonly IManageVRDParameters _manageVRDParameters;

        public VehicleRecallController(ILogger<VehicleRecallController> logger, IManageAPI manageAPI, IManageVRDParameters manageVRDParameters)
        {
            _logger = logger;
            _manageAPI = manageAPI;
            _manageVRDParameters = manageVRDParameters;
        }

        // POST: api/VehicleRecall/AcceptInput
        [HttpPost("AcceptInput")]
        [ProducesResponseType(200, Type = typeof(bool))]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public async Task<IActionResult> AcceptInput([FromBody] IEnumerable<VehicleRecallModel> vrData)
        {
            MethodBase method = MethodBase.GetCurrentMethod();

            try
            {
                if (vrData != null && vrData.Any())
                {
                    // Accept the JSON as input and Save it
                    var sourceFileName = "dataSource.json";
                    await _manageAPI.SaveInput(vrData, sourceFileName);

                    // Get json from TC API
                    var successOfVRDCalls = await _manageAPI.CallVRDApiAsync(vrData);

                    if (successOfVRDCalls)
                    {
                        // Add SYSTEM_TYPE_ETXT and SYSTEM_TYPE_FTXT 
                        var api3FileName = "api3.json";
                        await _manageAPI.AddContentToJsonSource(vrData, api3FileName);

                        return Ok($"File {sourceFileName} successfully saved -> {method.Name}");
                    }
                    else
                    {   // Return not found, if an the result of the API call is not found
                        _logger.LogError($"Error calling AddContentToJsonSource -> {method.Name}");
                        return NotFound($"Error calling AddContentToJsonSource -> {method.Name}");
                    }
                }

                _logger.LogError($"Null or empty json Data source received -> {method.Name}");
                return BadRequest($"Null or empty json Data source received -> {method.Name}");
            }
            catch (Exception e)
            {
                _logger.LogError($"Request failed -> {method.Name} Error {e}");
                return StatusCode(StatusCodes.Status500InternalServerError, e);
            }
        }

        // GET: api/VehicleRecall/GetAllData
        [HttpGet("GetAllData")]
        [ProducesResponseType(200)]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<IActionResult> GetAllData()
        {
            MethodBase method = MethodBase.GetCurrentMethod();

            try
            {
                // Get All Data from api3.json generated by API 3
                var result = await _manageAPI.GetAllData();

                if (result != null)
                    return new ContentResult() { StatusCode = (int)HttpStatusCode.OK, Content = JsonConvert.SerializeObject(result) };

                _logger.LogWarning($"Null or empty api3.json Data returned -> {method.Name}");
                return NoContent();
            }
            catch (Exception e)
            {
                _logger.LogError($"Request failed -> {method.Name} Error {e}");
                return StatusCode(StatusCodes.Status500InternalServerError, e);
            }
        }

        // GET: api/VehicleRecall/GetBySystemType/Fuel Supply
        [HttpGet("GetBySystemType/{st}", Name = "GetBySystemType")]
        [ProducesResponseType(200, Type = typeof(IEnumerable<VehicleRecallModel>))]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<IActionResult> GetBySystemType([FromRoute] string st)
        {
            MethodBase method = MethodBase.GetCurrentMethod();

            try
            {
                // Get one specific recall information from api3.json generated by API 3 by SYSTEM TYPE fields
                var result = await _manageAPI.GetBySystemType(st.ToLower());

                if (result != null && result.Any())
                    return new ContentResult() { StatusCode = (int)HttpStatusCode.OK, Content = JsonConvert.SerializeObject(result) };

                _logger.LogWarning($"Null or empty! No results searching by system type {st} found -> {method.Name}");
                return NoContent();
            }
            catch (Exception e)
            {
                _logger.LogError($"Request failed -> {method.Name} Error {e}");
                return StatusCode(StatusCodes.Status500InternalServerError, e);
            }
        }

        // GET: api/VehicleRecall/GetByRecallNumber/2015321
        [HttpGet("GetByRecallNumber/{rn}", Name = "GetByRecallNumber")]
        [ProducesResponseType(200, Type = typeof(VehicleRecallModel))]
        [ProducesResponseType(204)]
        [ProducesResponseType(500)]
        public async Task<IActionResult> GetByRecallNumber([FromRoute] string rn)
        {
            MethodBase method = MethodBase.GetCurrentMethod();

            try
            {
                // Get one specific recall information from api3.json generated by API 3
                var result = await _manageAPI.GetByRecallNumber(rn);

                if (result != null)
                    return new ContentResult() { StatusCode = (int)HttpStatusCode.OK, Content = JsonConvert.SerializeObject(result) };

                _logger.LogWarning($"Null or empty! No recall number {rn} found -> {method.Name}");
                return NoContent();
            }
            catch (Exception e)
            {
                _logger.LogError($"Request failed -> {method.Name} Error {e}");
                return StatusCode(StatusCodes.Status500InternalServerError, e);
            }
        }

        // GET: api/VehicleRecall/TestAPI
        [HttpGet("TestAPI")]
        [ProducesResponseType(200, Type = typeof(string))]
        [ProducesResponseType(204)]
        [ProducesResponseType(404)]
        public async Task<IActionResult> TestAPI()
        {
            _logger.LogInformation(_manageVRDParameters.VRDParameters["VRDEndPoint"]);
            var result = await Task.FromResult("Test Action Task");
            return Ok(result);
        }
    }
}
